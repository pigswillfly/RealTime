package Control

import(
	."fmt"
	."container/list"
	."strconv"
	."time"
	."strings"
	."Network"
	."Helpers"
)

const (
	
	// for sorting lists
	minFirst = 1
	maxFirst = -1
	chanSize = 1024
	resetTimer = 5
)

type Control struct{
	elev *Elevator				
	ElevMsg chan string		
	ElevAlive chan string
	elevators *List				
	friends int					
	cost_res int				
	best_cost int
	best_id chan int
	backup_timer int
	timer_ready chan int
	timer_done chan int
	net *Network				
	toNet chan string
	fromNet chan string

}

func Init_Control() *Control{

	// New Control object
	ctrl := new(Control)
	ctrl.elevators = New()
	ctrl.friends = 0
	ctrl.cost_res = -1
	ctrl.best_cost = 100
	ctrl.best_id = make(chan int)
	ctrl.backup_timer = resetTimer
	ctrl.timer_ready = make(chan int)
	ctrl.timer_done = make(chan int)
	
	// Set up network
	ctrl.toNet = make(chan string, chanSize)
	ctrl.fromNet = make(chan string, chanSize)
	ctrl.net = Init_Net(ctrl.toNet, ctrl.fromNet)
	Println("Network established")

	// Set up elevator
	ctrl.ElevMsg = make(chan string, chanSize)
	ctrl.ElevAlive = make(chan string, chanSize)
	ctrl.elev = Init_Elev(ctrl.ElevMsg, ctrl.ElevAlive)
	Println("Elevator Initialized")

	// Find which elevators are present ("Alive" messages receiving)
	Println("Finding friends")
	go ctrl.Recieve_Msg()
	// Wait
	Sleep(3*Second)
	Println(Itoa(ctrl.friends)+" friends found")

	// Set up backup timer
	go ctrl.Timer_Channel()
	ctrl.timer_done <- 1
	go ctrl.Timer()

	// Set own ID
	ctrl.Set_Elev_ID()

	// Set up alive message pulse
	go ctrl.Send_Alive_Msg()

	// Start receiving messages from elevator
	go ctrl.Rec_Elev_Msg()

	// Start elevator
	go ctrl.elev.Update_Floor()
	go ctrl.elev.List_Channel()
	go ctrl.elev.Poll_Buttons()
	go ctrl.elev.Print_Requests()
	go ctrl.elev.Run()

	return ctrl
}

func (ctrl *Control) Send_Alive_Msg(){

	Println("Begin sending Alive messages to network")
	go ctrl.elev.Pulse()
	// send alive message every time available in the alive channel
	for {
		msg := <-ctrl.ElevAlive
		Println("Sending alive msg")
		ctrl.toNet <- msg
	}
}

func (ctrl *Control) Rec_Alive_Msg(id int){
	
	Println(id, " Alive")
	ctrl.Update_Friends_List(id)
	if id == ctrl.elev.backup_id{
		t := <- ctrl.timer_ready
		ctrl.backup_timer = resetTimer
		ctrl.timer_done <- t
	}

}

func (ctrl *Control) Send_Msg(id int, to int, code string, args []string){

	// Make message comma delimited string
	//	[Sender ID],[Receiver ID],[Code],[Arguments]
	msg := Itoa(id) + "," + Itoa(to) + "," + code
	for i:= range args {
		if args[i] != ""{
			msg += "," + args[i]
		}
	}
	// Send to network
	ctrl.toNet <- msg
}

func (ctrl *Control) Decipher_Msg(msg string) (int, int, string, []string){
	
	substrings := SplitN(msg, ",", -1)		
	from_id,_ := Atoi(substrings[0])
	to_id,_ := Atoi(substrings[1])
	code := substrings[2]
	args := substrings[3:]
	return from_id, to_id, code, args
}

func (ctrl *Control) Recieve_Msg(){

	Println("Receiving messages from network")
	for{
		// Message format:
		//	[Sender ID],[Receiver ID],[Code],[Arguments]
		msg := <-ctrl.fromNet
		from_id, to_id, code, args := ctrl.Decipher_Msg(msg)
		send_args := make([]string,3)
		var i,j,k int

		if code == "Alive"{
			go ctrl.Rec_Alive_Msg(from_id)
		} else {
		// check received ID against own
			if to_id == ctrl.elev.ID{
				Println("Message received: "+msg)
				// action according to code
				switch code{
					case "CostPlease":
						// args -- button, floor
						i,_ = Atoi(args[0])
						j,_ = Atoi(args[1])
						send_args[0] = args[0]
						send_args[1] = args[1]
						send_args[2] = Itoa(ctrl.elev.Cost(i,j))
						go ctrl.Send_Msg(ctrl.elev.ID, from_id, "MyCost", send_args)

					case "MyCost":
						// args -- button, floor, cost	
						i,_ = Atoi(args[0])
						j,_ = Atoi(args[1])
						k,_ = Atoi(args[2])
						go ctrl.Handle_Costs(from_id, k, i, j)
				
					case "IAmYourBackup":
						// no args
						ctrl.elev.other_id = from_id

					case "AddFloor":
						// args -- button, floor for request
						Println("Adding floor")
						i,_ = Atoi(args[0])
						j,_ = Atoi(args[1])			
						go ctrl.elev.Add_Request(i,j)		

					case "Dead":
						// args -- dead elev id
						i,_ = Atoi(args[0])
						go ctrl.Timer_Expired(i)

					case "RemBackReq":
						// args -- floor
						i,_ = Atoi(args[0])
						go ctrl.elev.Remove_Backup_Request(i)

					case "AddBackReq":
						// args -- floor
						i,_ = Atoi(args[0])
						go ctrl.elev.Add_Backup_Request(i)
						
				
				}
			}
		}
	}
}	

func (ctrl *Control) Rec_Elev_Msg(){
	for{
		msg := <-ctrl.ElevMsg
		_, _, code, request := ctrl.Decipher_Msg(msg)
		if code == "Request"{
			go ctrl.New_Request(request)
		} else if code == "Handled"{
			if ctrl.elev.other_id != -1{
				go ctrl.Rem_Back_Req(request)
			}
		} else if code == "Adding"{
			if ctrl.elev.other_id != -1{
				go ctrl.Add_Back_Req(request)
			}
		} else if code == "NewBackup"{
				go ctrl.Request_Backup_List()
		}
	}
}

func (ctrl *Control) Rem_Back_Req(request []string){
	ctrl.Send_Msg(ctrl.elev.ID, ctrl.elev.other_id, "RemBackReq", request)
}

func (ctrl *Control) Add_Back_Req(request []string){
	ctrl.Send_Msg(ctrl.elev.ID, ctrl.elev.other_id, "AddBackReq", request)
}

func (ctrl *Control) New_Request(request []string){
	button,_ := Atoi(request[0])
	floor,_ := Atoi(request[1])
	if ctrl.friends == 0 {
		ctrl.elev.Add_Request(button,floor)
	} else {
		if ctrl.elev.Cost(button,floor)==0{
			ctrl.elev.Add_Request(button,floor)
		}
		go ctrl.Request_Costs(button,floor,request)
	}
}

func (ctrl *Control) Request_Costs(button int, floor int, request []string){

	l := ctrl.elevators
	for i:=l.Front(); i!=nil; i=i.Next(){
		if i.Value.(int) == ctrl.elev.ID {
			continue
		}
		ctrl.Send_Msg(ctrl.elev.ID, i.Value.(int), "CostPlease", request)
	}
	ctrl.cost_res = 0
	ctrl.best_cost = ctrl.elev.Cost(button,floor)
	ctrl.best_id <- ctrl.elev.ID
}

func (ctrl *Control) Handle_Costs(from_id int, nextCost int, button int, floor int){
	b_id := <-ctrl.best_id
	ctrl.cost_res += 1
	if nextCost < ctrl.best_cost{
		b_id = from_id
	}	
	if ctrl.cost_res == ctrl.friends{
		go ctrl.Decide_Elevator(button,floor)
	}
	ctrl.best_id <- b_id
}	

func (ctrl *Control) Decide_Elevator(button int, floor int){
	best := <- ctrl.best_id

	if best==ctrl.elev.ID{
		ctrl.elev.Add_Request(button,floor)
	} else {
		args := make([]string,2)
		args[0] = Itoa(button)
		args[1] = Itoa(floor)
		ctrl.Send_Msg(ctrl.elev.ID, best, "AddFloor", args)
	}

}

func (ctrl *Control) Timer_Channel(){
	for {
		ctrl.timer_ready <- <- ctrl.timer_done
	}
}

func (ctrl *Control) Timer(){
	
	for {
		Sleep(Second)
		if ctrl.elev.backup_id != -1{
			if ctrl.backup_timer > 0{
				t := <-ctrl.timer_ready
				ctrl.backup_timer--
				ctrl.timer_done <- t
				
			}
			if ctrl.backup_timer == 0{
				ctrl.Timer_Expired(ctrl.elev.backup_id)
			}
		}
	}
}

func (ctrl *Control) Timer_Expired(id int){

	Println("Timer expired for elevator ", id)
	// Remove elevator from list of other elevators
	// Send dead message if backup elevator
	l := ctrl.elevators
	for i:=l.Front(); i!=nil; i=i.Next(){
		if i.Value.(int) == id{
			l.Remove(i)
			ctrl.friends -= 1
		} else if i.Value.(int) == ctrl.elev.ID {
			continue
		} else {
			if id == ctrl.elev.backup_id{
				args := make([]string,1)
				args[0] = Itoa(id)
				ctrl.Send_Msg(ctrl.elev.ID, i.Value.(int), "Dead", args)
			}
		}
	}

	// Redistribute requests if matches backup ID
	// Assume button = direction of elevator
	if id == ctrl.elev.backup_id{
		// Send dead notification
		button := ctrl.elev.backup_dir
		request := make([]string,2)
		request[0] = Itoa(button)
		l = ctrl.elev.backup
		for i:=l.Front(); i!=nil; i=i.Next(){
			request[1] = Itoa(i.Value.(int))
			ctrl.New_Request(request)
			Sleep(2*Second)
		}
	}

	// Reset back up elevator
	ctrl.Set_Elev_Backup_ID()

}

func (ctrl *Control) Set_Elev_ID(){

	l := ctrl.elevators
	prev := ctrl.elev.ID
	if l.Back() == nil{
		ctrl.elev.ID = 1
	} else {
		ctrl.elev.ID = l.Back().Value.(int) + 1
	}
	Println("Elevator ID set to: "+Itoa(ctrl.elev.ID))
	if prev == -1{
		ctrl.Set_Elev_Backup_ID()
	}
}

func (ctrl *Control) Set_Elev_Backup_ID(){

	ctrl.elev.backup_id = -1
	if ctrl.friends == 0 || ctrl.elevators.Len() == 1{
		// no other elevators, don't need backup_id
		Println("No backup ID needed, no friends")
	} else if ctrl.friends == 1{
		if ctrl.elev.ID == ctrl.elevators.Front().Value.(int){
			ctrl.elev.backup_id = ctrl.elevators.Back().Value.(int)
		} else if ctrl.elev.ID == ctrl.elevators.Back().Value.(int){
			ctrl.elev.backup_id = ctrl.elevators.Front().Value.(int)
		}
	} else {
		// set backup id to next one in list
		l := ctrl.elevators
		if ctrl.elev.ID == l.Back().Value.(int){
			ctrl.elev.backup_id = l.Front().Value.(int)
			Println("back Backup ID set to:", ctrl.elev.backup_id)
			t := <-ctrl.timer_ready
			ctrl.backup_timer = resetTimer
			ctrl.timer_ready <- t
		} else {
			for i:=l.Front(); i!=nil; i=i.Next(){
				if ctrl.elev.ID == i.Value.(int) {
					ctrl.elev.backup_id = i.Next().Value.(int)
					Println("other Backup ID set to:", ctrl.elev.backup_id)
					t := <-ctrl.timer_ready
					ctrl.backup_timer = resetTimer
					ctrl.timer_ready <- t
				}
			}
		}
	}
}

func (ctrl *Control) Update_Friends_List(id int){

	// Search list of elevators, if not found, add 
	found := 0
	l := ctrl.elevators

	for i:=l.Front(); i!=nil; i=i.Next(){
		if id == i.Value.(int){
			found = 1
			break
		}
	}
	if found == 0 {
		if id != ctrl.elev.ID{
			ctrl.friends += 1
		}
		l.PushBack(id)
		Sort_Queue(minFirst, ctrl.elevators)
		if ctrl.elev.ID != -1{
			ctrl.Set_Elev_Backup_ID()
		}
	}

	if l.Len() > 0{
		Printf("Friends list: %d", l.Front().Value.(int))
		for i:=l.Front(); i!=nil; i=i.Next(){
			if i==l.Front(){
				continue
			}
			Printf(",%d", i.Value.(int))
		}
		Printf("\n")
	}
}

func (ctrl *Control) Request_Backup_List(){
	if ctrl.elev.backup_id != -1 && ctrl.elev.backup_id != ctrl.elev.ID{
		ctrl.Send_Msg(ctrl.elev.ID, ctrl.elev.backup_id, "IAmYourBackup", nil)
	} 
}













