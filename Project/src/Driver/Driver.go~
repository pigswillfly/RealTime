package Driver

import (   
    "C"
    "math"
	"Helpers"
)

const N_BUTTONS = 3
const N_FLOORS = 4

var lamp_channel_matrix Helpers.Matrix
var button_channel_matrix Helpers.Matrix

const (
    BUTTON_CALL_UP int = iota
    BUTTON_CALL_DOWN
    BUTTON_COMMAND
)

func Elev_Init() int{
    // Initialize hardware
    if IO_Init() < 1{
    	return 0
    }

	// Initialize matrices
	lamp_channel_matrix = Helpers.New_Matrix(N_FLOORS, N_BUTTONS)
	button_channel_matrix = Helpers.New_Matrix(N_FLOORS, N_BUTTONS)
	Matrix_Init()
    
    // Zero all floor button lights
    i := 0
    for i=0; i< N_FLOORS; i++ {
        if i != 0 {
            Set_Button_Light(BUTTON_CALL_DOWN, i, 0)
        } 
        if i != N_FLOORS-1 {
            Set_Button_Light(BUTTON_CALL_UP, i, 0)
        }
        Set_Button_Light(BUTTON_COMMAND, i, 0)
    }
    
    // Clear stop light, door open light, set floor indicator to ground floor
    Set_Stop_Light(0)
    Set_Door_Open_Light(0)
    Set_Floor_Indicator(0)
    
    return 1
    
} 

func Set_Speed(speed int) int{
	// TODO
    // To sharply stop elevator, direction bit is toggled before setting speed to 0
    last_speed := 0;
    
    // If to start (speed > 0)
    // If to stop (speed == 0)
    
    if speed > 0 {                  
        IO_Clear_Bit(MOTORDIR)
    } else if speed < 0 {
        IO_Set_Bit(MOTORDIR)
    } else if (last_speed < 0){    
        IO_Clear_Bit(MOTORDIR)
    } else if (last_speed > 0){
        IO_Set_Bit(MOTORDIR)
    }
    
    last_speed = speed
    
    // Write new setting to motor
    IO_Write_Analog(MOTOR, int(2048 + 4*math.Abs(float64(speed))))
	
	return speed
}

func Get_Floor_Sensor_Signal() int{
    if IO_Read_Bit(SENSOR1) == 1{
        return 0
    } else if IO_Read_Bit(SENSOR2) == 1{
        return 1
    } else if IO_Read_Bit(SENSOR3) == 1{
        return 2
    } else if IO_Read_Bit(SENSOR4) == 1{
        return 3
    } else{
        return -1
    }
}

func Get_Button_Signal(button int, floor int) int{
    // Make sure floor is 0 or greater
    if floor < 0{
        return -1
    }
    // Make sure floor doesn't exceed top floor
    if floor > N_FLOORS{
        return -1
    }
    // Make sure not call up and floor top floor
    if button == BUTTON_CALL_UP && floor == N_FLOORS-1{
        return -1
    }
    // Make sure not call down and floor 0
    if button == BUTTON_CALL_DOWN && floor == 0{
        return -1
    }
    // Make sure a button has been pressed
    if button != BUTTON_CALL_UP && button != BUTTON_CALL_DOWN && button != BUTTON_COMMAND{
        return -1
    }
    
    if IO_Read_Bit(button_channel_matrix.Get(floor,button)) == 1{
        return 1
    } else{
        return 0
    }
    
}

func Get_Stop_Signal()int{
    return IO_Read_Bit(STOP)
}

func Get_Obstruction_Signal()int{
    return IO_Read_Bit(OBSTRUCTION)
}

func Set_Floor_Indicator(floor int) int{
    // Make sure floor is 0 or greater
    if floor < 0{
        return -1
    }
    // Make sure floor doesn't exceed top floor
    if floor > N_FLOORS{
        return -1
    }
    
    // Binary encoding. One light must always be on
    if floor & 0x02 != 0{
        IO_Set_Bit(FLOOR_IND1)
    } else{
        IO_Clear_Bit(FLOOR_IND1)
    }
    
    if floor & 0x01 != 0{
        IO_Set_Bit(FLOOR_IND2)
    } else{
        IO_Clear_Bit(FLOOR_IND2)
    }

	return 0
}

func Set_Button_Light(button int, floor int, value int) int{
    // Make sure floor is 0 or greater
    if floor < 0{
        return -1
    }
    // Make sure floor doesn't exceed top floor
    if floor > N_FLOORS{
        return -1
    }
    // Make sure not call up and floor top floor
    if button == BUTTON_CALL_UP && floor == N_FLOORS-1{
        return -1
    }
    // Make sure not call down and floor 0
    if button == BUTTON_CALL_DOWN && floor == 0{
        return -1
    }
    // Make sure a button has been pressed
    if button != BUTTON_CALL_UP && button != BUTTON_CALL_DOWN && button != BUTTON_COMMAND{
        return -1
    }
    
    if value == 1{
        IO_Set_Bit(lamp_channel_matrix.Get(floor,button))
    } else{
        IO_Clear_Bit(lamp_channel_matrix.Get(floor,button))    
    }

	return 0
}

func Get_Button_Light(button int, floor int) bool{
	return IO_Read_Bit(lamp_channel_matrix.Get(floor,button))>0
}

func Set_Stop_Light(value int){
    if value == 1{
        IO_Set_Bit(LIGHT_STOP)
    } else{
        IO_Clear_Bit(LIGHT_STOP)
    }
}

func Set_Door_Open_Light(value int){
    if value == 1{
        IO_Set_Bit(DOOR_OPEN)
    } else{

        IO_Clear_Bit(DOOR_OPEN)
    }
}

func Matrix_Init(){
	
	lamp_channel_matrix.Set(0,0,LIGHT_UP1)
	lamp_channel_matrix.Set(0,1,LIGHT_DOWN1)
	lamp_channel_matrix.Set(0,2,LIGHT_COMMAND1)
	lamp_channel_matrix.Set(1,0,LIGHT_UP2)
	lamp_channel_matrix.Set(1,1,LIGHT_DOWN2)
	lamp_channel_matrix.Set(1,2,LIGHT_COMMAND2)
	lamp_channel_matrix.Set(2,0,LIGHT_UP3)
	lamp_channel_matrix.Set(2,1,LIGHT_DOWN3)
	lamp_channel_matrix.Set(2,2,LIGHT_COMMAND3)
	lamp_channel_matrix.Set(3,0,LIGHT_UP4)
	lamp_channel_matrix.Set(3,1,LIGHT_DOWN4)
	lamp_channel_matrix.Set(3,2,LIGHT_COMMAND4)	

	button_channel_matrix.Set(0,0,FLOOR_UP1)
	button_channel_matrix.Set(0,1,FLOOR_DOWN1)
	button_channel_matrix.Set(0,2,FLOOR_COMMAND1)
	button_channel_matrix.Set(1,0,FLOOR_UP2)
	button_channel_matrix.Set(1,1,FLOOR_DOWN2)
	button_channel_matrix.Set(1,2,FLOOR_COMMAND2)
	button_channel_matrix.Set(2,0,FLOOR_UP3)
	button_channel_matrix.Set(2,1,FLOOR_DOWN3)
	button_channel_matrix.Set(2,2,FLOOR_COMMAND3)
	button_channel_matrix.Set(3,0,FLOOR_UP4)
	button_channel_matrix.Set(3,1,FLOOR_DOWN4)
	button_channel_matrix.Set(3,2,FLOOR_COMMAND4)

}
